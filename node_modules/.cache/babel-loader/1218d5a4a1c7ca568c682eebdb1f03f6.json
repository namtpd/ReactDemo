{"ast":null,"code":"// import { useSelector, useDispatch } from 'react-redux';\n// import { useState } from 'react';\n// export const Login = (props) => {\n//     const cleanuser = {username: \"\", password: \"\"};\n//     const [account, setAccount] = useState('');\n//     const loginAccount = useSelector(state => state.loginAccount);\n//     const dispatch = useDispatch();\n//     let handleFieldChange = (event) => {\n//         setAccount({...account, [event.target.name]: event.target.value})\n//     }\n//     let login = (e) => {\n//         e.preventDefault();\n//         const isValid = formValidation();\n//         if (!isValid)\n//             return;\n//         handleOnLogin();\n//     }\n//     let createAccount = (e) => {\n//         e.preventDefault();\n//         const isValid = formValidation();\n//         if (!isValid)\n//             return;\n//         handleOnSubmit();\n//     }\n//     const handleOnSubmit = () => {\n//         dispatch({ type : 'CREATE_ACC', account: account });\n//         props.history.push(\"/login\",\n//         account);\n//     }\n//     const handleOnLogin = () => {\n//         dispatch({ type : 'LOGIN', loginAccount: account });\n//         let isValid = loginErrorFunction();\n//         if (!isValid)\n//             return\n//         props.history.push(\"/login\", account);\n//     }\n//     const [usernameError, setUsernameError] = useState(\"\");\n//     const [passwordError, setPasswordError] = useState(\"\");\n//     const formValidation = () => {\n//         const usernameErr = {};\n//         const passwordErr = {};\n//         let isValid = true;\n//         if (account.username.trim().length < 5 || account.username.trim().length > 10) {\n//             usernameErr.shortLen = \"Username needs to be between 5 and 10 characters long\";\n//             isValid = false;\n//         }\n//         if (account.password.trim().length < 5) {\n//             passwordErr.longErr = \"Password should be at least 5 characters long \";\n//             isValid = false;\n//         }\n//         setUsernameError(usernameErr);\n//         setPasswordError(passwordErr);\n//         return isValid;\n//     };\n//     const [loginError, setLoginError] = useState(\"\");\n//     const loginErrorFunction = () => {\n//         let isValid = true;\n//         if (loginAccount.username == '') {\n//             loginError.longErr = \"Invalid username or password\";\n//             isValid = false\n//         }\n//         return isValid\n//     }\n//     return (\n//         <div>\n//             <h1>Create Account</h1>\n//             <div>\n//             {Object.keys(loginError).map((key) => {\n//                                 return <div style={{ color: \"red\" }}>{loginError[key]}</div>;\n//                             })}\n//             </div>\n//             <table>\n//                 <tbody>\n//                     <tr>\n//                         <tr>Username</tr>\n//                         <td>\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"Username\"\n//                                 name=\"username\"\n//                                 value={account.username}\n//                                 onChange={handleFieldChange} />\n//                             {Object.keys(usernameError).map((key) => {\n//                                 return <div style={{ color: \"red\" }}>{usernameError[key]}</div>;\n//                             })}\n//                         </td>\n//                     </tr>\n//                     <tr>\n//                         <tr>Password</tr>\n//                         <td>\n//                             <input\n//                                 type=\"text\"\n//                                 placeholder=\"password\"\n//                                 name=\"password\"\n//                                 value={account.password}\n//                                 onChange={handleFieldChange} />\n//                             {Object.keys(passwordError).map((key) => {\n//                                 return <div style={{ color: \"red\" }}>{passwordError[key]}</div>;\n//                             })}\n//                         </td>\n//                     </tr>\n//                     <tr>\n//                         <td>\n//                             <button type=\"button\" onClick={login}>Login</button>\n//                         </td>\n//                         <td>\n//                             <button type=\"button\" onClick={createAccount}>createAccount</button>\n//                         </td>\n//                     </tr>\n//                 </tbody>\n//             </table>\n//         </div>\n//     );\n// };","map":{"version":3,"sources":["C:/Nam/waaworkspace/WAA/FinalExam/src/components/Login.js"],"names":[],"mappingssourcesContent":["// import { useSelector, useDispatch } from 'react-redux';\r\n// import { useState } from 'react';\r\n\r\n// export const Login = (props) => {\r\n//     const cleanuser = {username: \"\", password: \"\"};\r\n//     const [account, setAccount] = useState('');\r\n\r\n//     const loginAccount = useSelector(state => state.loginAccount);\r\n\r\n//     const dispatch = useDispatch();\r\n\r\n//     let handleFieldChange = (event) => {\r\n//         setAccount({...account, [event.target.name]: event.target.value})\r\n//     }\r\n\r\n//     let login = (e) => {\r\n//         e.preventDefault();\r\n//         const isValid = formValidation();\r\n//         if (!isValid)\r\n//             return;\r\n\r\n//         handleOnLogin();\r\n//     }\r\n\r\n//     let createAccount = (e) => {\r\n//         e.preventDefault();\r\n//         const isValid = formValidation();\r\n//         if (!isValid)\r\n//             return;\r\n\r\n//         handleOnSubmit();\r\n//     }\r\n\r\n//     const handleOnSubmit = () => {\r\n//         dispatch({ type : 'CREATE_ACC', account: account });\r\n//         props.history.push(\"/login\",\r\n//         account);\r\n//     }\r\n\r\n//     const handleOnLogin = () => {\r\n//         dispatch({ type : 'LOGIN', loginAccount: account });\r\n//         let isValid = loginErrorFunction();\r\n//         if (!isValid)\r\n//             return\r\n//         props.history.push(\"/login\", account);\r\n//     }\r\n//     const [usernameError, setUsernameError] = useState(\"\");\r\n//     const [passwordError, setPasswordError] = useState(\"\");\r\n\r\n//     const formValidation = () => {\r\n//         const usernameErr = {};\r\n//         const passwordErr = {};\r\n\r\n//         let isValid = true;\r\n//         if (account.username.trim().length < 5 || account.username.trim().length > 10) {\r\n//             usernameErr.shortLen = \"Username needs to be between 5 and 10 characters long\";\r\n//             isValid = false;\r\n//         }\r\n//         if (account.password.trim().length < 5) {\r\n//             passwordErr.longErr = \"Password should be at least 5 characters long \";\r\n//             isValid = false;\r\n//         }\r\n\r\n//         setUsernameError(usernameErr);\r\n//         setPasswordError(passwordErr);\r\n\r\n//         return isValid;\r\n//     };\r\n\r\n//     const [loginError, setLoginError] = useState(\"\");\r\n\r\n//     const loginErrorFunction = () => {\r\n//         let isValid = true;\r\n//         if (loginAccount.username == '') {\r\n//             loginError.longErr = \"Invalid username or password\";\r\n//             isValid = false\r\n//         }\r\n//         return isValid\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n//             <h1>Create Account</h1>\r\n//             <div>\r\n//             {Object.keys(loginError).map((key) => {\r\n//                                 return <div style={{ color: \"red\" }}>{loginError[key]}</div>;\r\n//                             })}\r\n\r\n//             </div>\r\n//             <table>\r\n//                 <tbody>\r\n//                     <tr>\r\n//                         <tr>Username</tr>\r\n//                         <td>\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"Username\"\r\n//                                 name=\"username\"\r\n//                                 value={account.username}\r\n//                                 onChange={handleFieldChange} />\r\n//                             {Object.keys(usernameError).map((key) => {\r\n//                                 return <div style={{ color: \"red\" }}>{usernameError[key]}</div>;\r\n//                             })}\r\n//                         </td>\r\n//                     </tr>\r\n//                     <tr>\r\n//                         <tr>Password</tr>\r\n//                         <td>\r\n//                             <input\r\n//                                 type=\"text\"\r\n//                                 placeholder=\"password\"\r\n//                                 name=\"password\"\r\n//                                 value={account.password}\r\n//                                 onChange={handleFieldChange} />\r\n//                             {Object.keys(passwordError).map((key) => {\r\n//                                 return <div style={{ color: \"red\" }}>{passwordError[key]}</div>;\r\n//                             })}\r\n//                         </td>\r\n//                     </tr>\r\n//                     <tr>\r\n//                         <td>\r\n//                             <button type=\"button\" onClick={login}>Login</button>\r\n//                         </td>\r\n//                         <td>\r\n//                             <button type=\"button\" onClick={createAccount}>createAccount</button>\r\n//                         </td>\r\n//                     </tr>\r\n//                 </tbody>\r\n//             </table>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n"]},"metadata":{},"sourceType":"module"}